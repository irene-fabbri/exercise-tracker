class UserController {
  constructor(private createUserService: CreateUserService) {}

  createUser(request: Request, response: Response, next) {
    const username = request.body.username;

    const userId = this.createUserService.execute(username);

    response.status(201).json({
      message: "User created",
      userId: userId,
    });
  }
}

class CreateUserService {
  constructor(private userRepository: UserRepository) {}

  async execute(usernameAsString: string) {
    const username: Username = new Username(usernameAsString);
    const user = await this.userRepository.findByUsername(username);

    if (user) {
      throw new UserAlreadyExists(username);
    }

    const userId = UserId.generateFromUsername(username);

    this.userRepository.create(new User(userId, username));
  }
}

interface UserRepository {
  findByUsername(username: Username): Promise<User | null>;
  create(user: User): Promise<void>;
}

class User {
  constructor(public readonly id: UserId, public readonly username: Username) {}
}

class Username {
  constructor(public readonly value: string) {
    // check validity of value
    // if not throw a domain error like InvalidUsername
  }
}

class DomainError extends Error {}

class UserAlreadyExists extends DomainError {
  constructor(username: Username) {
    super(`Username '${username.value}' already exists`);
  }
}

class UserId {
  private constructor(public readonly value: string) {}

  static generateFromUsername(username: Username): UserId {
    return new UserId(hash(username.value));
  }
}

function hash(value: string): string {
  // TODO: da implementare
  return value;
}
